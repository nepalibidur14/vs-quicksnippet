{
  "Console Log (TS)": {
    "prefix": "clt",
    "body": ["console.log('$1');"],
    "description": "Insert a console.log statement (TypeScript)"
  },
  "Interface Declaration": {
    "prefix": "iface",
    "body": ["interface $1 {", "  $0", "}"],
    "description": "Create a TypeScript interface"
  },
  "Type Alias": {
    "prefix": "talias",
    "body": ["type $1 = {", "  $0", "};"],
    "description": "Define a custom type alias"
  },
  "Enum Declaration": {
    "prefix": "tenum",
    "body": ["enum $1 {", "  $2 = '$2',", "  $3 = '$3'", "}", "$0"],
    "description": "Declare a TypeScript enum"
  },
  "Class with Constructor": {
    "prefix": "tclass",
    "body": ["class $1 {", "  constructor($2) {", "    $0", "  }", "}"],
    "description": "Create a TypeScript class with constructor"
  },
  "Function with Types": {
    "prefix": "tfunc",
    "body": ["function $1($2: $3): $4 {", "  $0", "}"],
    "description": "Function signature with typed params/return"
  },
  "Async Function with Return Type": {
    "prefix": "tasync",
    "body": [
      "async function $1($2: $3): Promise<$4> {",
      "  try {",
      "    $0",
      "  } catch (err) {",
      "    console.error(err);",
      "    throw err;",
      "  }",
      "}"
    ],
    "description": "Async TS function with specified return type"
  },
  "Generic Function": {
    "prefix": "tgen",
    "body": ["function $1<T>($2: T): T {", "  $0", "  return $2;", "}"],
    "description": "Basic generic function template"
  },
  "Readonly Array": {
    "prefix": "troarr",
    "body": ["const $1: ReadonlyArray<$2> = [$3];", "$0"],
    "description": "Declare a readonly array in TypeScript"
  },
  "Partial Type Helper": {
    "prefix": "tpartial",
    "body": ["type Partial$1 = Partial<$1>;", "$0"],
    "description": "Use TS Partial utility type to make props optional"
  }
}
